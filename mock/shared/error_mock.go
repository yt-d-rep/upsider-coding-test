// Code generated by MockGen. DO NOT EDIT.
// Source: ./shared/error.go
//
// Generated by this command:
//
//	mockgen -source ./shared/error.go -destination ./mock/shared/error_mock.go -package shared_mock
//

// Package shared_mock is a generated GoMock package.
package shared_mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockCustomError is a mock of CustomError interface.
type MockCustomError struct {
	ctrl     *gomock.Controller
	recorder *MockCustomErrorMockRecorder
}

// MockCustomErrorMockRecorder is the mock recorder for MockCustomError.
type MockCustomErrorMockRecorder struct {
	mock *MockCustomError
}

// NewMockCustomError creates a new mock instance.
func NewMockCustomError(ctrl *gomock.Controller) *MockCustomError {
	mock := &MockCustomError{ctrl: ctrl}
	mock.recorder = &MockCustomErrorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCustomError) EXPECT() *MockCustomErrorMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockCustomError) Error() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(string)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockCustomErrorMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockCustomError)(nil).Error))
}

// Is mocks base method.
func (m *MockCustomError) Is(arg0 error) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Is", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Is indicates an expected call of Is.
func (mr *MockCustomErrorMockRecorder) Is(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Is", reflect.TypeOf((*MockCustomError)(nil).Is), arg0)
}
