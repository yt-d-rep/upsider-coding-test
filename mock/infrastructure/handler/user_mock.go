// Code generated by MockGen. DO NOT EDIT.
// Source: ./infrastructure/handler/user.go
//
// Generated by this command:
//
//	mockgen -source ./infrastructure/handler/user.go -destination ./mock/infrastructure/handler/user_mock.go -package handler_mock
//

// Package handler_mock is a generated GoMock package.
package handler_mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockUserHandler is a mock of UserHandler interface.
type MockUserHandler struct {
	ctrl     *gomock.Controller
	recorder *MockUserHandlerMockRecorder
}

// MockUserHandlerMockRecorder is the mock recorder for MockUserHandler.
type MockUserHandlerMockRecorder struct {
	mock *MockUserHandler
}

// NewMockUserHandler creates a new mock instance.
func NewMockUserHandler(ctrl *gomock.Controller) *MockUserHandler {
	mock := &MockUserHandler{ctrl: ctrl}
	mock.recorder = &MockUserHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHandler) EXPECT() *MockUserHandlerMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockUserHandler) Login(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Login", ctx)
}

// Login indicates an expected call of Login.
func (mr *MockUserHandlerMockRecorder) Login(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockUserHandler)(nil).Login), ctx)
}

// Register mocks base method.
func (m *MockUserHandler) Register(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Register", ctx)
}

// Register indicates an expected call of Register.
func (mr *MockUserHandlerMockRecorder) Register(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockUserHandler)(nil).Register), ctx)
}
