// Code generated by MockGen. DO NOT EDIT.
// Source: ./infrastructure/handler/invoice.go
//
// Generated by this command:
//
//	mockgen -source ./infrastructure/handler/invoice.go -destination ./mock/infrastructure/handler/invoice_mock.go -package handler_mock
//

// Package handler_mock is a generated GoMock package.
package handler_mock

import (
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	gomock "go.uber.org/mock/gomock"
)

// MockInvoiceHandler is a mock of InvoiceHandler interface.
type MockInvoiceHandler struct {
	ctrl     *gomock.Controller
	recorder *MockInvoiceHandlerMockRecorder
}

// MockInvoiceHandlerMockRecorder is the mock recorder for MockInvoiceHandler.
type MockInvoiceHandlerMockRecorder struct {
	mock *MockInvoiceHandler
}

// NewMockInvoiceHandler creates a new mock instance.
func NewMockInvoiceHandler(ctrl *gomock.Controller) *MockInvoiceHandler {
	mock := &MockInvoiceHandler{ctrl: ctrl}
	mock.recorder = &MockInvoiceHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInvoiceHandler) EXPECT() *MockInvoiceHandlerMockRecorder {
	return m.recorder
}

// Issue mocks base method.
func (m *MockInvoiceHandler) Issue(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Issue", ctx)
}

// Issue indicates an expected call of Issue.
func (mr *MockInvoiceHandlerMockRecorder) Issue(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Issue", reflect.TypeOf((*MockInvoiceHandler)(nil).Issue), ctx)
}

// ListBetween mocks base method.
func (m *MockInvoiceHandler) ListBetween(ctx *gin.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListBetween", ctx)
}

// ListBetween indicates an expected call of ListBetween.
func (mr *MockInvoiceHandlerMockRecorder) ListBetween(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBetween", reflect.TypeOf((*MockInvoiceHandler)(nil).ListBetween), ctx)
}
