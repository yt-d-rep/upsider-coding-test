// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/auth/service.go
//
// Generated by this command:
//
//	mockgen -source ./domain/auth/service.go -destination ./mock/domain/auth/service_mock.go -package auth_mock
//

// Package auth_mock is a generated GoMock package.
package auth_mock

import (
	reflect "reflect"
	auth "upsider-base/domain/auth"

	gomock "go.uber.org/mock/gomock"
)

// MockPasswordService is a mock of PasswordService interface.
type MockPasswordService struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordServiceMockRecorder
}

// MockPasswordServiceMockRecorder is the mock recorder for MockPasswordService.
type MockPasswordServiceMockRecorder struct {
	mock *MockPasswordService
}

// NewMockPasswordService creates a new mock instance.
func NewMockPasswordService(ctrl *gomock.Controller) *MockPasswordService {
	mock := &MockPasswordService{ctrl: ctrl}
	mock.recorder = &MockPasswordServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPasswordService) EXPECT() *MockPasswordServiceMockRecorder {
	return m.recorder
}

// Hash mocks base method.
func (m *MockPasswordService) Hash(password string) (auth.HashedPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hash", password)
	ret0, _ := ret[0].(auth.HashedPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hash indicates an expected call of Hash.
func (mr *MockPasswordServiceMockRecorder) Hash(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hash", reflect.TypeOf((*MockPasswordService)(nil).Hash), password)
}

// Match mocks base method.
func (m *MockPasswordService) Match(password auth.RawPassword, hashed auth.HashedPassword) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Match", password, hashed)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Match indicates an expected call of Match.
func (mr *MockPasswordServiceMockRecorder) Match(password, hashed any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Match", reflect.TypeOf((*MockPasswordService)(nil).Match), password, hashed)
}

// NewHashedIfValid mocks base method.
func (m *MockPasswordService) NewHashedIfValid(password string) (auth.HashedPassword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewHashedIfValid", password)
	ret0, _ := ret[0].(auth.HashedPassword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewHashedIfValid indicates an expected call of NewHashedIfValid.
func (mr *MockPasswordServiceMockRecorder) NewHashedIfValid(password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewHashedIfValid", reflect.TypeOf((*MockPasswordService)(nil).NewHashedIfValid), password)
}

// MockTokenService is a mock of TokenService interface.
type MockTokenService struct {
	ctrl     *gomock.Controller
	recorder *MockTokenServiceMockRecorder
}

// MockTokenServiceMockRecorder is the mock recorder for MockTokenService.
type MockTokenServiceMockRecorder struct {
	mock *MockTokenService
}

// NewMockTokenService creates a new mock instance.
func NewMockTokenService(ctrl *gomock.Controller) *MockTokenService {
	mock := &MockTokenService{ctrl: ctrl}
	mock.recorder = &MockTokenServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenService) EXPECT() *MockTokenServiceMockRecorder {
	return m.recorder
}

// Generate mocks base method.
func (m *MockTokenService) Generate() (auth.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Generate")
	ret0, _ := ret[0].(auth.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Generate indicates an expected call of Generate.
func (mr *MockTokenServiceMockRecorder) Generate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Generate", reflect.TypeOf((*MockTokenService)(nil).Generate))
}

// Validate mocks base method.
func (m *MockTokenService) Validate(token auth.Token) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate.
func (mr *MockTokenServiceMockRecorder) Validate(token any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockTokenService)(nil).Validate), token)
}
